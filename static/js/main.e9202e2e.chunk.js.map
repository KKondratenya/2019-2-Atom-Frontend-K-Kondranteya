{"version":3,"sources":["constants/ActionWeather.js","store/index.js","components/City.js","actions/weatherActions.js","components/Cities.js","components/CityInfo.js","components/Geo.js","App.js","serviceWorker.js","index.js","reducers/weatherWork.js","reducers/index.js","store/storeProd.js"],"names":["SET_CITY","SET_WEATHER","store","require","default","module","exports","City","city","index","to","style","textDecoration","className","onClick","data","dispatch","type","ActionWeather","payload","name","main","temp","humidity","wind","speed","temp_max","temp_min","connect","state","weather","cities","cityRender","useEffect","length","map","value","key","String","renderInfo","useState","cityDaily","setCity","console","log","id","fetch","then","resp","json","Geo","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","toFixed","App","getCities","headers","origin","document","setWeather","list","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","initialState","rootReducer","combineReducers","action","ActionTypes","middlewares","ReduxThunk","enhancer","applyMiddleware","configureStore","createStore"],"mappings":"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","file":"static/js/main.e9202e2e.chunk.js","sourcesContent":["export default {\n\t// Counter\n\tSET_CITY: 'SET_CITY',\n\tSET_WEATHER: 'SET_WEATHER',\n};\n","const { default: store } =\n\tprocess.env.NODE_ENV === 'production'\n\t\t? require('./storeProd')\n\t\t: require('./storeDev');\n\n// Exporting the store, then use it anywhere like store.getState() or store.dispatch()\nmodule.exports = store();\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { setCity } from '../actions/weatherActions.js';\nimport '../styles/city.css';\n/* eslint react/prop-types: 0 */\n/* eslint jsx-a11y/click-events-have-key-events : 0 */\n/* eslint jsx-a11y/no-static-element-interactions : 0 */\n\nfunction City({ city, index }) {\n\treturn (\n\t\t<Link to=\"/city\" style={{ textDecoration: 'none' }}>\n\t\t\t<div className=\"city\" onClick={() => setCity(index)}>\n\t\t\t\t<div className=\"city-information\">\n\t\t\t\t\t<div className=\"name\">{city.name}</div>\n\t\t\t\t\t<div className=\"temp\">{city.main.temp}</div>\n\t\t\t\t\t<div className=\"celsium\">°C</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"weather-city\">\n\t\t\t\t\t<div>Humidity {city.main.humidity}</div>\n\t\t\t\t\t<div>{city.wind.speed} m/s</div>\n\t\t\t\t\t<div className=\"weather-temp\">\n\t\t\t\t\t\t{city.main.temp_max}/{city.main.temp_min} °C\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n}\n\nexport default City;\n","import ActionWeather from '../constants/ActionWeather.js';\nimport store from '../store';\n\nexport function setWeather(data) {\n\tstore.dispatch({\n\t\ttype: ActionWeather.SET_WEATHER,\n\t\tpayload: data,\n\t});\n}\n\nexport function setCity(data) {\n\tstore.dispatch({\n\t\ttype: ActionWeather.SET_CITY,\n\t\tpayload: data,\n\t});\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport City from './City.js';\n/* eslint react/prop-types: 0 */\nfunction Cities({ city }) {\n\tuseEffect(() => {}, []);\n\tlet cityRender;\n\tif (city.length) {\n\t\tcityRender = (\n\t\t\t<div>\n\t\t\t\t{city.map((value, index) => (\n\t\t\t\t\t<City key={String(index)} city={value} index={index} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\tcityRender = null;\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"heading\">\n\t\t\t\t<div>\n\t\t\t\t\t<div>Manage cities</div>\n\t\t\t\t\t<Link to=\"/geo\" style={{ textDecoration: 'none' }}>\n\t\t\t\t\t\tГео\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{cityRender}\n\t\t</div>\n\t);\n}\nfunction mapStateToProps(state) {\n\treturn {\n\t\tcity: state.weather.cities,\n\t};\n}\n// export default Cities;\nexport default connect(mapStateToProps)(Cities);\n","import React, { useEffect, useState } from 'react';\nimport '../styles/city.css';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n/* eslint react/prop-types: 0 */\n/* eslint react-hooks/exhaustive-deps : 0 */\nfunction CityInfo({ city }) {\n\tconst [cityDaily, setCity] = useState(false);\n\tconsole.log(city.id);\n\tlet renderInfo;\n\tconst getCities = () => {\n\t\tfetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?id=${city.id}&appid=7ae3973c1cff0f607e622fa2bcc37d48`,\n\t\t)\n\t\t\t.then((resp) => resp.json())\n\t\t\t.then((data) => setCity(data));\n\t};\n\n\tuseEffect(() => {\n\t\tgetCities();\n\t}, []);\n\n\tif (cityDaily) {\n\t\trenderInfo = <div>cityDaily.id</div>;\n\t} else {\n\t\trenderInfo = null;\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<Link to=\"/\" style={{ textDecoration: 'none' }}>\n\t\t\t\t\tВернуться\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div className=\"city-name\">{city.name}</div>\n\t\t\t\t<div className=\"temperature\">\n\t\t\t\t\t<div className=\"temp-info\">{city.main.temp}</div>\n\t\t\t\t\t<div className=\"celsium-info\">°C</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"weather\">{city.weather[0].main}</div>\n\t\t\t\t{renderInfo}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nfunction mapStateToProps(state) {\n\treturn {\n\t\tcity: state.weather.cities[state.weather.index],\n\t};\n}\n// export default Cities;\nexport default connect(mapStateToProps)(CityInfo);\n","import React, { useEffect, useState } from 'react';\nimport '../styles/city.css';\nimport { Link } from 'react-router-dom';\n/* eslint react/prop-types: 0 */\nfunction Geo({ city }) {\n\tconst [cityDaily, setCity] = useState(false);\n\tlet renderInfo;\n\tconst geoLocation = () => {\n\t\tif ('geolocation' in navigator) {\n\t\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\t\tconst { latitude } = position.coords;\n\t\t\t\tconst { longitude } = position.coords;\n\t\t\t\tconsole.log(latitude, longitude);\n\t\t\t\tfetch(\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${latitude.toFixed(\n\t\t\t\t\t\t1,\n\t\t\t\t\t)}&lon=${longitude.toFixed(\n\t\t\t\t\t\t1,\n\t\t\t\t\t)}&appid=7ae3973c1cff0f607e622fa2bcc37d48`,\n\t\t\t\t)\n\t\t\t\t\t.then((resp) => resp.json())\n\t\t\t\t\t.then((data) => setCity(data));\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('Геолокация недоступна');\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tgeoLocation();\n\t}, []);\n\n\tif (cityDaily) {\n\t\trenderInfo = (\n\t\t\t<div>\n\t\t\t\t<div className=\"city-name\">{cityDaily.name}</div>\n\t\t\t\t<div className=\"temperature\">\n\t\t\t\t\t<div className=\"temp-info\">{cityDaily.main.temp}</div>\n\t\t\t\t\t<div className=\"celsium-info\">°C</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"weather\">{cityDaily.weather[0].main}</div>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\trenderInfo = null;\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<Link to=\"/\" style={{ textDecoration: 'none' }}>\n\t\t\t\t\tВернуться\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t{renderInfo}\n\t\t</div>\n\t);\n}\n\n// export default Cities;\nexport default Geo;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Cities from './components/Cities.js';\nimport CityInfo from './components/CityInfo.js';\nimport Geo from './components/Geo';\nimport { setWeather } from './actions/weatherActions.js';\nimport './App.css';\n\nfunction App() {\n\tconst getCities = () => {\n\t\tfetch(\n\t\t\t'https://api.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&appid=7ae3973c1cff0f607e622fa2bcc37d48',\n\t\t\t{ headers: { origin: document.origin } },\n\t\t)\n\t\t\t.then((resp) => resp.json())\n\t\t\t.then((data) => setWeather(data.list));\n\t};\n\t// fetch(\n\t// \t\t'https://api.openweathermap.org/data/2.5/weather?q=London&appid=7ae3973c1cff0f607e622fa2bcc37d48',\n\t// \t).then((resp) => resp.json())\n\t// \t.then(data => (cities.push(data)))\n\t// \t.then(() => fetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid=7ae3973c1cff0f607e622fa2bcc37d48'))\n\t// \t.then(resp => resp.json())\n\t// \t.then(data => console.log(data))\n\n\tuseEffect(() => {\n\t\tgetCities();\n\t}, []);\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/city\">\n\t\t\t\t\t<CityInfo />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/geo\">\n\t\t\t\t\t<Geo />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"\">\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Cities />\n\t\t\t\t\t</div>\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />{' '}\n\t</Provider>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import ActionTypes from '../constants/ActionWeather.js';\n\n/* eslint no-param-reassign: 0 */\nconst initialState = {\n\tcities: [],\n\tindex: 0,\n};\n\nexport default function message(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase ActionTypes.SET_WEATHER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcities: [...action.payload],\n\t\t\t};\n\t\tcase ActionTypes.SET_CITY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tindex: action.payload,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from 'redux';\nimport weather from './weatherWork.js';\n\nconst rootReducer = combineReducers({\n\tweather,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst middlewares = [ReduxThunk];\nconst enhancer = [applyMiddleware(...middlewares)];\n\nexport default function configureStore(initialState = {}) {\n\treturn createStore(rootReducer, initialState, ...enhancer);\n}\n"],"sourceRoot":""}